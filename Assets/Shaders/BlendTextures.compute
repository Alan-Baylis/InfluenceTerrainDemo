#pragma kernel CSMain

Texture2D<float4> mask;
int border;
Texture2D<float4> grass;
Texture2D<float4> stone;
Texture2D<float4> water;
Texture2D<float4> sand;
Texture2D<float4> snow;
RWTexture2D<float4> result;				//Result baked texture

SamplerState _LinearClamp;

float2 scaleUV(float2 uv, float borderF)
{
    float2 result = float2(uv.x * (1 - borderF * 2) + borderF, uv.y * (1 - borderF * 2) + borderF);		//todo consider use FMA function
	return result; 
}

[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID)
{
	float w, h;
    result.GetDimensions(w, h);
	float maskW, maskH;
	mask.GetDimensions(maskW, maskH);
	float borderF = border/maskW;

	float2 uv = float2(id.x/(w - 1), id.y/(h - 1));
	uv = scaleUV(uv, borderF);

	//Calculate mask color texel
	float4 masked = mask.SampleLevel(_LinearClamp, uv, 0);

	//Lerp textures
	float4 resultPixel = sand[id];
	resultPixel = lerp(resultPixel, stone[id], masked.r);
	resultPixel = lerp(resultPixel, grass[id], masked.g);
	resultPixel = lerp(resultPixel, water[id], masked.b);
	resultPixel = lerp(resultPixel, snow[id], masked.a);

    result[id] = resultPixel;
}
